#!/usr/bin/env ruby
require 'rubygems'
require 'aws-sdk'
require 'json'
require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: tailstack [options]"
  opts.on('-r', '--region REGION', 'AWS Region such as "us-west-2"'){ |o| options[:region] = o }
  opts.on('-s', '--stack STACK_NAME', 'CloudFormation Stack to tail'){ |o| options[:stack] = o }
  opts.on('-p', '--profile PROFILE', 'Specify AWS profile from config file'){ |o| options[:profile] = o }
  opts.on('-l', '--list', 'Lists stacks in environtment and exits'){ |o| options[:list] = o }
  opts.on('-o', '--outputs', 'Combine with --list also list outputs'){ |o| options[:outputs] = o }
  opts.on('-d', '--parms', 'Combine with --list also list parameters'){ |o| options[:parms] = o }
  opts.on('-g', '--get_output OUTPUT', 'Prints out the parameter and exits'){ |o| options[:get_out] = o }
  opts.on('-v', '--verbose', 'Up the verbosity'){ |o| options[:verbose] = o }
end.parse!

using_env_creds = true
aws_access_key_id = nil
aws_secret_access_key = nil
options[:profile] ||= 'default'

if !options.key?(:region)
  found_profile = false

  if File.exists?(File.expand_path('~/.aws/config'))
    File.read(File.expand_path('~/.aws/config')).each_line do |line|
      if found_profile
        options[:region] = line.split('=').last.strip
        puts "Using region #{options[:region]}" if options.key? :verbose
        break;
      end
      if line.match("#{options[:profile]}\\]")
        found_profile = true
      end
    end
  else
    puts "~/.aws/config file not found for reading the region"
  end
end

if (!ENV.key?('AWS_ACCESS_KEY_ID') || !ENV.key?('AWS_SECRET_ACCESS_KEY')) || options.key?(:profile)
  found_profile = false
  found_key     = false
  found_secret  = false

  if File.exist?(File.expand_path('~/.aws/credentials'))
    File.read(File.expand_path('~/.aws/credentials')).each_line do |line|
      if found_profile && line.match('aws_access_key_id')
        aws_access_key_id = line.split('=').last.strip
        found_key = true
        if found_secret
          break
        end
      end
      if found_profile && line.match('aws_secret_access_key')
        aws_secret_access_key = line.split('=').last.strip
        found_secret = true
        using_env_creds = false
        if found_key
          break
        end
      end
      if line.match("\\[#{options[:profile]}\\]")
        found_profile = true
      end
    end
  end
end

if found_key && using_env_creds == false
  Aws.config.update({
    region: options[:region],
    credentials: Aws::Credentials.new(aws_access_key_id, aws_secret_access_key)
  })
else
  Aws.config.update({ region: options[:region] })
end

# Color stuff
class String
  def black;          "\e[30m#{self}\e[0m" end
  def red;            "\e[31m#{self}\e[0m" end
  def green;          "\e[32m#{self}\e[0m" end
  def brown;          "\e[33m#{self}\e[0m" end
  def blue;           "\e[34m#{self}\e[0m" end
  def magenta;        "\e[35m#{self}\e[0m" end
  def cyan;           "\e[36m#{self}\e[0m" end
  def gray;           "\e[37m#{self}\e[0m" end

  def bg_black;       "\e[40m#{self}\e[0m" end
  def bg_red;         "\e[41m#{self}\e[0m" end
  def bg_green;       "\e[42m#{self}\e[0m" end
  def bg_brown;       "\e[43m#{self}\e[0m" end
  def bg_blue;        "\e[44m#{self}\e[0m" end
  def bg_magenta;     "\e[45m#{self}\e[0m" end
  def bg_cyan;        "\e[46m#{self}\e[0m" end
  def bg_gray;        "\e[47m#{self}\e[0m" end

  def bold;           "\e[1m#{self}\e[22m" end
  def italic;         "\e[3m#{self}\e[23m" end
  def underline;      "\e[4m#{self}\e[24m" end
  def blink;          "\e[5m#{self}\e[25m" end
  def reverse_color;  "\e[7m#{self}\e[27m" end
end

def event_color(resource_status)
  event_green = %w[ UPDATE_COMPLETE CREATE_COMPLETE DELETE_COMPLETE UPDATE_COMPLETE_CLEANUP_IN_PROGRESS UPDATE_ROLLBACK_COMPLETE ]
  event_yellow = %w[ UPDATE_IN_PROGRESS CREATE_IN_PROGRESS DELETE_IN_PROGRESS UPDATE_ROLLBACK_IN_PROGRESS UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS ]

  case
  when event_green.include?(resource_status)
    return resource_status.green
  when event_yellow.include?(resource_status)
    return resource_status.brown
  else
    return resource_status.red
  end
end

# AWS Calls now
cfn = Aws::CloudFormation::Client.new()

def isThisTheEnd? event
  events_good = %w[ CREATE_COMPLETE UPDATE_COMPLETE DELETE_COMPLETE ]
  events_bad  = %w[ CREATE_FAILED UPDATE_ROLLBACK_COMPLETE ROLLBACK_COMPLETE ]

  return false unless event[:resource_type] == 'AWS::CloudFormation::Stack'
  exit 1 if events_bad.include? event[:resource_status]
  return events_good.include? event[:resource_status]
end

def print_list(cfn, options)
  # Build up map that contains the stack id -> status
  status_map = {}
  cfn.list_stacks.to_h[:stack_summaries].each do |s|
    status_map[s[:stack_id]] = s[:stack_status]
  end

  cfn.describe_stacks.to_h[:stacks].each do |s|
    next if options.key?(:stack) && options[:stack] != s[:stack_name]
    next if status_map[s[:stack_id]] == 'DELETE_COMPLETE'
    puts "#{s[:stack_name].bold} - #{s[:description].cyan}" unless options.key? :get_out
    if options.key?(:parms) && s[:parameters]
      puts " #{"Parameters:".green}"
      s[:parameters].each do |parm|
        puts "  #{parm[:parameter_key].blue}: #{parm[:parameter_value].gray}"
      end
    end
    if (options.key?(:outputs) || options.key?(:get_out)) && s[:outputs]
      puts " #{"Outputs:".magenta}" unless options.key? :get_out
      s[:outputs].each do |output|
        if options.key?(:get_out) && output[:output_key] == options[:get_out]
          puts output[:output_value]
          exit 0
        end
        puts "  #{output[:output_key].brown}: #{output[:output_value].gray}" unless options.key? :get_out
      end
    end
  end

  exit 0
end

print_list(cfn, options) if (options.key?(:list) || options.key?(:get_out))

# Turn on outputs for finish summary
options[:outputs] = true
events_seen = []
loop do
  # Does the stack exist?
  unless cfn.describe_stacks.to_h[:stacks].map{|s| s[:stack_name]}.include? options[:stack]
    puts "Stack '#{options[:stack]}' not found."
    exit 1
  end
  # Get the events from the stack
  stack_out = cfn.describe_stack_events({ stack_name: options[:stack] })
  stack_out.to_h[:stack_events].reverse.each do |event|
    unless events_seen.include? event[:event_id]
      puts "#{event[:timestamp]} #{event[:resource_type]} #{event_color(event[:resource_status])} #{event[:resource_status_reason]}"
      #puts "#{event[:resource_properties]}"
      events_seen << event[:event_id]
    end
  end
  print_list(cfn, options) if isThisTheEnd? stack_out.to_h[:stack_events].first
  sleep 2
end
